<?xml version="1.0" encoding="UTF-8"?>
<project name="dANN" default="all" basedir=".">
	<property name="debug.level" value="vars,lines,source" />

	<path id="classpath.ant">
		<fileset dir="lib/ant" includes="**/*.jar"/>
	</path>
	<path id="classpath.build">
		<fileset dir="lib/build" includes="**/*.jar"/>
	</path>
	<path id="classpath.test">
		<fileset dir="lib/test" includes="**/*.jar"/>
		<fileset dir="build/jar" includes="dann.jar"/>
		<fileset dir="build/jar" includes="dann-tests.jar"/>
	</path>
	<path id="classpath.test.coverage">
		<fileset dir="lib/test" includes="**/*.jar"/>
		<fileset dir="build/jar" includes="dann.jar"/>
		<fileset dir="build/jar" includes="dann-coverage.jar"/>
	</path>

	<taskdef name="lint4j" classname="com.jutils.lint4j.ant.Lint4jAntTask">
		<classpath>
			<fileset dir="lib/ant/lint">
				<include name="**/*.jar"/>
			</fileset>
		</classpath>
	</taskdef>
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath>
			<fileset dir="lib/ant/findbugs">
				<include name="**/*.jar"/>
			</fileset>
		</classpath>
	</taskdef>
	<taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
		<classpath>
			<fileset dir="lib/ant/checkstyle">
				<include name="**/*.jar"/>
			</fileset>
		</classpath>
	</taskdef>
	<taskdef resource="tasks.properties">
		<classpath>
			<fileset dir="lib/ant/testing/cobertura">
				<include name="**/*.jar"/>
			</fileset>
		</classpath>
	</taskdef>
	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
		<classpath>
			<fileset dir="lib/ant/pmd">
				<include name="**/*.jar"/>
			</fileset>
		</classpath>
	</taskdef>
	<taskdef name="xjc" classname="org.jvnet.jaxb2_commons.xjc.XJC2Task">
		<classpath>
			<fileset dir="lib/ant/xjc">
				<include name="**/*.jar"/>
			</fileset>
		</classpath>
	</taskdef>
    
	<target name="clean" description="Cleans the build environment">
		<delete dir="build"/>
		<delete file="cobertura.ser"/>
	</target>
    
	<target name="javadoc" description="Generate javadocs from code">
		<mkdir dir="build/javadoc"/>
		<delete includeemptydirs="true">
			<fileset dir="build/javadoc" includes="**/*"/>
		</delete>
		<javadoc destdir="build/javadoc/" classpathref="classpath.build" useexternalfile="true">
			<fileset dir="src/com/syncleus/dann" includes="**/*.java"/>
			<fileset dir="build/src-jaxb/com/syncleus/dann" includes="**/*.java"/>
		</javadoc>
	</target>

	<target name="lint" description="Perform lint checks">
		<mkdir dir="build/lint"/>
		<lint4j packages="com.syncleus.*" level="5">
			<sourcepath>
				<dirset dir="src">
					<include name="**/*.java" />
				</dirset>
				<pathelement path="src/" />
			</sourcepath>
			<classpath refid="classpath.build"/>
			<formatters>
				<formatter type="text" />
				<formatter type="xml" toFile="build/lint/all.xml"/>
			</formatters>
		</lint4j>
	</target>

    <target  name="jaxb"  description="generate JAXB classes">
        <mkdir dir="build/src-jaxb"/>
        <xjc extension="true" destdir="build/src-jaxb">
            <schema dir="schema/jaxb" includes="*.xsd"/>
			<arg line="-Xequals -XhashCode -Xannotate"/>
        </xjc>
    </target>

	<target name="compile" depends="jaxb" description="compile class files">
		<delete dir="build/classes"/>

		<mkdir dir="build/classes"/>
		<javac destdir="build/classes" classpathref="classpath.build" debug="true" debuglevel="${debug.level}" excludes="com/syncleus/tests/**">
            <src path="src"/>
            <src path="build/src-jaxb"/>
        </javac>
		<copy file="log4j.properties" todir="build/classes/"/>


		<mkdir dir="build/tests/classes"/>
		<javac destdir="build/tests/classes" classpathref="classpath.build" debug="true" debuglevel="${debug.level}">
            <src path="src"/>
            <src path="build/src-jaxb"/>
			<include name="com/syncleus/tests/**"/>
		</javac>
		<delete dir="build/tests/classes/com/syncleus/dann"/>

		<mkdir dir="build/coverage/classes"/>
		<cobertura-instrument todir="build/coverage/classes">
			<fileset dir="build">
				<include name="classes/**/*.class"/>
				<include name="tests/classes/**/*.class"/>
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="compile-warnings" depends="jaxb" description="compile class files and display all warnings">
		<delete dir="build/classes"/>

		<mkdir dir="build/classes"/>
		<javac destdir="build/classes" classpathref="classpath.build" debug="true" debuglevel="${debug.level}" excludes="com/syncleus/tests/**">
            <src path="src"/>
            <src path="build/src-jaxb"/>
			<compilerarg value="-Xlint"/>
		</javac>

		<mkdir dir="build/tests/classes"/>
		<javac destdir="build/tests/classes" classpathref="classpath.build" debug="true" debuglevel="${debug.level}">
            <src path="src"/>
            <src path="build/src-jaxb"/>
			<include name="com/syncleus/tests/**"/>
			<compilerarg value="-Xlint"/>
		</javac>
		<delete dir="build/tests/classes/com/syncleus/dann"/>

		<mkdir dir="build/coverage/classes"/>
		<cobertura-instrument todir="build/coverage/classes">
			<fileset dir="build">
				<include name="classes/**/*.class"/>
				<include name="tests/classes/**/*.class"/>
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="build" description="package compiled class files into a jar">
		<mkdir dir="build/jar"/>
		<jar destfile="build/jar/dann.jar" basedir="build/classes">
			<manifest>
				<attribute name="Product-Name" value="dANN"/>
				<attribute name="Package-Title" value="com.syncleus.dann"/>
				<attribute name="Package-Version" value="2.0"/>
				<attribute name="Specification-Title" value="An Artificial Intelligence library."/>
				<attribute name="Specification-Vendor" value="Syncleus, Inc."/>
				<attribute name="Specification-Version" value="2.0"/>
				<attribute name="Implementation-Title" value="An Artificial Intelligence library."/>
				<attribute name="Implementation-Vendor" value="Syncleus, Inc."/>
				<attribute name="Implementation-Vendor-Id" value="com.syncleus.dann"/>
				<attribute name="Implementation-Version" value="2.0"/>
			</manifest>
		</jar>
		<jar destfile="build/jar/dann-tests.jar" basedir="build/tests/classes">
			<manifest>
				<attribute name="Product-Name" value="dANN"/>
				<attribute name="Package-Title" value="com.syncleus.dann"/>
				<attribute name="Package-Version" value="2.0"/>
				<attribute name="Specification-Title" value="An Artificial Intelligence library."/>
				<attribute name="Specification-Vendor" value="Syncleus, Inc."/>
				<attribute name="Specification-Version" value="2.0"/>
				<attribute name="Implementation-Title" value="An Artificial Intelligence library."/>
				<attribute name="Implementation-Vendor" value="Syncleus, Inc."/>
				<attribute name="Implementation-Vendor-Id" value="com.syncleus.dann"/>
				<attribute name="Implementation-Version" value="2.0"/>
			</manifest>
		</jar>
		<jar destfile="build/jar/dann-coverage.jar" basedir="build/coverage/classes">
			<manifest>
				<attribute name="Product-Name" value="dANN"/>
				<attribute name="Package-Title" value="com.syncleus.dann"/>
				<attribute name="Package-Version" value="2.0"/>
				<attribute name="Specification-Title" value="An Artificial Intelligence library."/>
				<attribute name="Specification-Vendor" value="Syncleus, Inc."/>
				<attribute name="Specification-Version" value="2.0"/>
				<attribute name="Implementation-Title" value="An Artificial Intelligence library."/>
				<attribute name="Implementation-Vendor" value="Syncleus, Inc."/>
				<attribute name="Implementation-Vendor-Id" value="com.syncleus.dann"/>
				<attribute name="Implementation-Version" value="2.0"/>
			</manifest>
		</jar>
	</target>
    
	<target name="tests-nocoverage" description="run all unit tests without generating coverage information">
		<mkdir dir="build/tests"/>
		<junit printsummary="yes" haltonfailure="no" showoutput="yes">
			<classpath refid="classpath.test"/>
			<formatter type="xml"/>
			<batchtest fork="yes" todir="build/tests">
				<fileset dir="src">
					<include name="com/syncleus/tests/**/Test*.java"/>
					<exclude name="**/AllTests.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="tests-coverage" description="run all unit tests and generate coverage information">
		<mkdir dir="build/coverage/tests"/>
		<junit printsummary="yes" haltonfailure="no" showoutput="yes" >
			<classpath refid="classpath.test.coverage"/>
			<formatter type="xml"/>
			<batchtest fork="yes" todir="build/coverage/tests">
				<fileset dir="src">
					<include name="com/syncleus/tests/**/Test*.java"/>
					<exclude name="**/AllTests.java"/>
				</fileset>
			</batchtest>
		</junit>

        <mkdir dir="build/coverage/reports"/>
        <cobertura-report format="xml" srcdir="src/" destdir="build/coverage/reports"/>

		<move file="./cobertura.ser" tofile="build/coverage/cobertura.ser"/>
	</target>
	
	<target name="findbugs" description="run findbugs check on built jar writing output to a log file">
		<mkdir dir="build/findbugs"/>
		<findbugs home="lib/ant/findbugs/"
				  output="xml"
				  outputFile="build/findbugs/findbugs-report.xml" >
			<auxClasspath path="lib/run/java3d/j3dcore.jar"/>
			<auxClasspath path="lib/run/java3d/freehep/freehep-j3d.jar"/>
			<auxClasspath path="lib/run/java3d/j3dutils.jar"/>
			<auxClasspath path="lib/run/java3d/vecmath.jar"/>
			<auxClasspath path="lib/run/jaxb/jaxb2-basics-runtime-0.5.3.jar"/>
			<auxClasspath path="lib/run/log4j/log4j-1.2.15.jar"/>
			<sourcePath path="src/" />
			<class location="build/jar/dann.jar" />
		</findbugs>
	</target>


	<target name="checkstyle" description="run checkstyle checks on the source code">
		<mkdir dir="build/checkstyle"/>
		<checkstyle config="checks.xml" maxErrors="2147483647">
			<fileset dir="src" includes="**/*.java"/>
			<formatter type="plain"/>
			<formatter type="xml" toFile="build/checkstyle/checkstyle-report.xml"/>
		</checkstyle>
	</target>

	<target name="pmd" description="run pmd checks on the source code">
		<mkdir dir="build/pmd"/>
		<pmd rulesetfiles="pmd.xml">
			<formatter type="xml" toFile="build/pmd/pmd-report.xml"/>
			<fileset dir="src/">
				<include name="**/*.java"/>
			</fileset>
		</pmd>
	</target>

	<!-- TODO this should be made non-netbeans specific -->
    <target name="profile" description="profile code using a specific unit test, menu produced on standard IO">
        <nbprofiledirect>
            <classpath refid="classpath.test"/>
        </nbprofiledirect>
        <java fork="true" classname="com.syncleus.tests.dann.InteractiveTests">
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
            <classpath>
				<pathelement location="build/jar/dann.jar"/>
				<pathelement location="build/jar/dann-tests.jar"/>
				<pathelement location="lib/testing/junit-4.6.jar"/>
				<pathelement location="lib/log4j-1.2.15.jar"/>
				<pathelement location="lib/j3dcore.jar"/>
				<pathelement location="lib/freehep-j3d.jar"/>
				<pathelement location="lib/j3dutils.jar"/>
				<pathelement location="lib/vecmath.jar"/>
            </classpath>
        </java>
    </target>


	<target name="test-interactive" description="run a specific unit test specified via interactive menu on standard IO">
        <java fork="true" classname="com.syncleus.tests.dann.InteractiveTests">
        	<classpath refid="classpath.test"/>
        </java>
	</target>



	<target name="build-all" description="Clean, compile, then build">
		<antcall target="clean"/>
		<antcall target="jaxb"/>
		<antcall target="compile"/>
		<antcall target="build"/>
	</target>

	<target name="tests-all" description="clean, compile, build, then run tests-nocoverage">
		<antcall target="clean"/>
		<antcall target="jaxb"/>
		<antcall target="compile"/>
		<antcall target="build"/>
		<antcall target="tests-nocoverage"/>
	</target>

	<target name="all" description="clean, javadoc, lint, compile, build, then run both tests-nocoverage and tests-coverage">
		<antcall target="clean"/>
		<antcall target="jaxb"/>
		<antcall target="javadoc"/>
		<antcall target="lint"/>
		<antcall target="compile"/>
		<antcall target="build"/>
		<antcall target="tests-nocoverage"/>
		<antcall target="tests-coverage"/>
	</target>
</project>
